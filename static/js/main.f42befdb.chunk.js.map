{"version":3,"sources":["logo.svg","components/ListScreen/ListScreen.js","components/DetailScreen/DetailScreen.js","App.js","reportWebVitals.js","index.js"],"names":["ListScreen","useState","data","setData","searchTag","setSearchTag","useEffect","fetch","method","headers","body","JSON","stringify","query","then","response","json","launchesPast","console","log","className","type","placeholder","onChange","e","target","value","filter","title","mission_name","toLowerCase","includes","map","item","to","onClick","name","date","launch_date_local","site","launch_site","site_name_long","localStorage","setItem","id","DetailScreen","tags","setTags","missionName","getItem","missionDate","missionSite","tag","index","onKeyUp","key","App","client","ApolloClient","cache","InMemoryCache","uri","ApolloProvider","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAAe,I,oCCsFAA,MAjFf,WAEE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAsCJ,mBAAS,IAA/C,mBAuDA,OAvDA,UAeAK,qBAAU,WAERC,MAAM,kCAAmC,CACrCC,OAAQ,OACRC,QAAS,CAAE,eAAiB,oBAC5BC,KAAMC,KAAKC,UAAU,CAAEC,MAlBd,wKAoBZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAIZ,EAAQY,EAASb,KAAKe,mBAGvC,IA4BHC,QAAQC,IAAIjB,GAEV,qBAAKkB,UAAU,YAAf,SACE,sBAAK,cAAY,eAAeA,UAAU,aAA1C,UACQ,kDACA,uBAAOC,KAAK,OAAOC,YAAY,qBAAqBC,SAAU,SAACC,GAC3DnB,EAAamB,EAAEC,OAAOC,UAE1B,6BAAKxB,EAAKyB,QAAO,SAAAC,GACb,MAAgB,IAAbxB,GAEQwB,EAAMC,aAAaC,cAAcC,SAAS3B,EAAU0B,eADpDF,OACJ,KAIVI,KAAI,SAAAC,GACD,OAAO,cAAC,IAAD,CAAMC,GAAG,gBAAgBC,QAAS,kBA1CvCC,EA0CsDH,EAAKJ,aA1CrDQ,EA0CmEJ,EAAKK,kBA1ClEC,EA0CqFN,EAAKO,YAAYC,eAzClIC,aAAaC,QAAQ,OAAQP,GAC7BM,aAAaC,QAAQ,OAAQN,QAC7BK,aAAaC,QAAQ,OAAQJ,GAHd,IAACH,EAAMC,EAAME,GA0CP,SAA8H,oBAAkBnB,UAAU,eAA5B,SAA4Ca,EAAKJ,cAAxCI,EAAKW,iB,cCrCtJC,MAvCf,WACE,MAAwB5C,mBAAS,IAAjC,mBAAO6C,EAAP,KAAaC,EAAb,KACIC,EAAcN,aAAaO,QAAQ,QACnCC,EAAcR,aAAaO,QAAQ,QACnCE,EAAcT,aAAaO,QAAQ,QAWvC,OACE,qBAAK7B,UAAU,YAAf,SAEE,sBAAK,cAAY,iBAAiBA,UAAU,kBAA5C,UACE,iDACA,+CAAkB4B,KAClB,+CAAkBE,KAClB,mDAAsBC,KACtB,gCACE,uCACA,oBAAI/B,UAAU,OAAd,SACG0B,EAAKd,KAAI,SAACoB,EAAKC,GAAN,OACR,6BACGD,GADMC,QAKb,uBAAOhC,KAAK,OAAOC,YAAY,YAAYgC,QA1BnC,SAAC9B,GAEF,UAAVA,EAAE+B,MACHR,EAAQ,GAAD,mBAAKD,GAAL,CAAWtB,EAAEC,OAAOC,SAC3BgB,aAAaC,QAAQ,MAAOnB,EAAEC,OAAOC,OACrCF,EAAEC,OAAOC,MAAQ,gB,+BCcR8B,MArBf,WAEE,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,IAAK,+CAGP,OACE,cAACC,EAAA,EAAD,CAAgBL,OAAQA,EAAxB,SACE,qBAAKrC,UAAU,MAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,IAAIC,UAAWjE,IACjC,cAAC,IAAD,CAAOgE,KAAK,gBAAgBC,UAAWpB,cCRpCqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtD,MAAK,YAAkD,IAA/CuD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f42befdb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useQuery } from \"@apollo/client\";\r\nimport './ListScreen.css';\r\n\r\nfunction ListScreen() {\r\n  \r\n  const [data, setData] = useState([])\r\n  const [searchTag, setSearchTag] = useState(\"\");\r\n  const [storageData, setStorageData] = useState([]);\r\n\r\n  const API_QUERY = `\r\n  {\r\n    launchesPast(limit: 10) {\r\n      id\r\n      mission_name\r\n      launch_date_local\r\n      launch_site {\r\n        site_name_long\r\n      }\r\n    }\r\n  }\r\n  `\r\n\r\n  useEffect(() => {\r\n    // fetch('http://jsonplaceholder.typicode.com/posts')\r\n    fetch(\"http://api.spacex.land/graphql/\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\" : \"application/json\" },\r\n        body: JSON.stringify({ query: API_QUERY })\r\n    })\r\n    .then(response => response.json())\r\n    .then(response => setData(response.data.launchesPast))\r\n\r\n    // findIndex()\r\n  }, [])\r\n\r\n  const handleID = (name, date, site) => {\r\n    localStorage.setItem('name', name);\r\n    localStorage.setItem('date', date);\r\n    localStorage.setItem('site', site);\r\n\r\n  }\r\n\r\n//   const findIndex = () => {\r\n\r\n//     let storageID = localStorage.getItem('id');\r\n//     let storageTag = localStorage.getItem('tag')\r\n//     let index = data.findIndex(x => x.id == storageID)\r\n//     // data[index].tag = storageTag\r\n//     // if(!data[index].tag) {\r\n//     //     data[index].tag = \"\";\r\n//     // } else {\r\n//     //     data[index].tag = storageTag\r\n//     // }\r\n    \r\n//     // if(storageTag) {\r\n//     //     data[index].tag = storageTag;\r\n//     // }\r\n//     // localStorage.setItem('newObj', data[index])\r\n//     // console.log('data', data[index])\r\n//   }\r\n  \r\n  console.log(data)\r\n  return (\r\n    <div className=\"container\">\r\n      <div data-testid=\"listScreen-1\" className=\"listScreen\">   \r\n              <h1>Space X Launches</h1>\r\n              <input type=\"text\" placeholder=\"Search by tag name\" onChange={(e) => {\r\n                  setSearchTag(e.target.value);\r\n              }}/>\r\n              <h1>{data.filter(title => {\r\n                  if(searchTag == \"\") {\r\n                      return title \r\n                  } else if (title.mission_name.toLowerCase().includes(searchTag.toLowerCase())) {\r\n                      return title\r\n                  }\r\n              })\r\n              .map(item => {\r\n                  return <Link to=\"/detailscreen\" onClick={() => handleID(item.mission_name, item.launch_date_local, item.launch_site.site_name_long)}><ul key={item.id} className=\"mission_name\">{item.mission_name}</ul></Link>\r\n              })}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListScreen;\r\n\r\n","import React, { useState } from 'react';\r\nimport './DetailScreen.css';\r\n\r\nfunction DetailScreen() {\r\n  const [tags, setTags] = useState([])\r\n  let missionName = localStorage.getItem('name');\r\n  let missionDate = localStorage.getItem('date');\r\n  let missionSite = localStorage.getItem('site');\r\n\r\n  const addTags = (e) => {\r\n    \r\n    if(e.key === \"Enter\") {\r\n      setTags([...tags, e.target.value]);\r\n      localStorage.setItem(\"tag\", e.target.value)\r\n      e.target.value = \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\r\n      <div data-testid=\"detailScreen-1\" className=\"mission-details\">\r\n        <h1>Mission Details</h1>\r\n        <p>Mission Name: {missionName}</p>\r\n        <p>Mission Date: {missionDate}</p>\r\n        <p>Mission Location: {missionSite}</p>\r\n        <div>\r\n          <h1>Tags:</h1>\r\n          <ul className=\"tags\">\r\n            {tags.map((tag, index) => (\r\n              <h5 key={index} >\r\n                {tag}\r\n              </h5>\r\n            ))}\r\n          </ul>\r\n          <input type=\"text\" placeholder=\"Add a tag\" onKeyUp={addTags} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DetailScreen;","import logo from './logo.svg';\nimport './App.css';\nimport ListScreen from './components/ListScreen/ListScreen.js';\nimport DetailScreen from './components/DetailScreen/DetailScreen.js';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport  { ApolloClient, InMemoryCache, ApolloProvider, HttpLink } from '@apollo/client';\n\nfunction App() {\n\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    uri: \"https://graphql-weather-api.herokuapp.com/\"\n  })\n\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={ListScreen} />\n            <Route path=\"/detailscreen\" component={DetailScreen} />\n          </Switch>\n        </Router>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}